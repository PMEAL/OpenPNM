name: Ubuntu

on: [push]

jobs:
  build:

    if: (! contains(github.event.head_commit.message, 'ci min')) &&
        (! contains(github.event.head_commit.message, 'ci examples'))

    runs-on: ${{ matrix.operating-system }}
    defaults:
      run:
        shell: bash -l {0}

    strategy:
      max-parallel: 4
      matrix:
        # python-version: [3.7, 3.8]
        python-version: [3.8]
        operating-system: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Cache conda
      #   uses: actions/cache@v2
      #   env:
      #     CACHE_NUMBER: 1  # increase value -> force reset cache
      #   with:
      #     path: ~/conda_pkgs_dir
      #     key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('**/conda_requirements.txt') }}

      # - name: Set up conda
      #   uses: conda-incubator/setup-miniconda@v2
      #   with:
      #     use-mamba: true
      #     miniforge-variant: Mambaforge
      #     miniforge-version: latest
      #     allow-softlinks: true
      #     use-only-tar-bz2: true
      #     show-channel-urls: false
      #     auto-activate-base: true
      #     channels: conda-forge
      #     channel-priority: strict
      #     # condarc-file: requirements/.condarc
      #     python-version: ${{ matrix.python-version }}

      # - name: Install dependencies (conda)
      #   run: |
      #     cat requirements/conda_requirements.txt >> requirements.txt
      #     cat requirements/test_requirements.txt >> requirements.txt
      #     cat requirements/optional_requirements.txt >> requirements.txt
      #     printf "pyamg\nmpi4py\npetsc\npetsc4py\nopenmpi\n" >> requirements.txt
      #     mamba install --file requirements.txt
      #     # Install OpenPNM from the checked-out branch
      #     pip install -e . --no-deps

      - name: Install dependencies (pip)
        run: |
          pip install \
            -r requirements/pip_requirements.txt \
            -r requirements/test_requirements.txt
          # Install OpenPNM from the checked-out branch
          pip install -e . --no-deps

      - name: Running tests
        run:
          pytest \
            --cov=. \
            --cov-report=xml \
            --ignore=scripts \
            --ignore=openpnm/utils/petsc.py

      - name: Upload coverage to Codecov
        if: matrix.python-version == 3.7
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
