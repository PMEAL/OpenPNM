{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cc23f8c3",
   "metadata": {},
   "source": [
    "# Managing Clustered Networks\n",
    "\n",
    "This tutorial will cover the common issue of a network that is \"clustered\", meaning that some pores are not connected the main body of the network. This is fairly common when extracting networks from tomogram, but can occur when getting creative with networks like stitching two together. A clustered network causes problems for the numerical solvers because it leads to \"singular\" matrices (i.e. they cannot be solved). Below we will explain what this means, and how to fix it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7ba1bfe5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import openpnm as op\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "7ad276ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "pn = op.network.Demo(shape=[5, 5 ,1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83993317",
   "metadata": {},
   "source": [
    "## Creating a Clustered Network\n",
    "\n",
    "Now that we've created a network, lets `trim` some throats to create clusters of isolated pores:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "5077113b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "op.topotools.trim(network=pn, throats=[4, 5, 8, 9, 20, 21, 30, 31])\n",
    "ax = op.visualization.plot_connections(pn)\n",
    "op.visualization.plot_coordinates(pn, ax=ax);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5a96ab0",
   "metadata": {},
   "source": [
    "Now we can have 3 total \"clusters\", two small clusters at the bottom plus one large cluster which constitutes the rest of the network. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f50a60b",
   "metadata": {},
   "source": [
    "## Illustrating the Problem\n",
    "Let's first see the problem this creates and why. This requires running (or attempting to run) a transport simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "9f42aa0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "══════════════════════════════════════════════════════════════════════════════\n",
      "phase_01 : <openpnm.phase.Water at 0x23cb60d1a90>\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  #  Properties                                                   Valid Values\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  2  pore.temperature                                                  25 / 25\n",
      "  3  pore.pressure                                                     25 / 25\n",
      "  4  pore.contact_angle                                                25 / 25\n",
      "  5  pore.density                                                      25 / 25\n",
      "  6  pore.molar_density                                                25 / 25\n",
      "  7  pore.surface_tension                                              25 / 25\n",
      "  8  pore.thermal_conductivity                                         25 / 25\n",
      "  9  pore.vapor_pressure                                               25 / 25\n",
      " 10  pore.viscosity                                                    25 / 25\n",
      " 11  throat.hydraulic_conductance                                      32 / 32\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  #  Labels                                                 Assigned Locations\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  2  pore.all                                                               25\n",
      "  3  throat.all                                                             32\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n"
     ]
    }
   ],
   "source": [
    "w = op.phase.Water(network=pn)\n",
    "w.add_model(propname='throat.hydraulic_conductance',\n",
    "            model=op.models.physics.hydraulic_conductance.generic_hydraulic)\n",
    "print(w)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a931d66b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your network is clustered, making Ax = b ill-conditioned\n"
     ]
    }
   ],
   "source": [
    "flow = op.algorithms.StokesFlow(network=pn, phase=w)\n",
    "flow.set_value_BC(pores=pn.pores('left'), values=200_000)\n",
    "flow.set_value_BC(pores=pn.pores('right'), values=100_000)\n",
    "try:\n",
    "    flow.run()\n",
    "except Exception as e:\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1ec44ef",
   "metadata": {},
   "source": [
    "As we can see above, attempting to run `flow` resulted in an Exception with a message about the matrix being singular. Let's see how a clustered network creates this problem. Let's print the A matrix as an image:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "2d8f0c27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x23cb61fb6a0>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(flow.A.todense() != 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcf84750",
   "metadata": {},
   "source": [
    "Referring to the network visualization above we can see that pores 5 and 10 are connected to each other, but not to any other pores. Looking at the A matrix above we can this reflected in the pattern. We can see that on row 5 there is an entry in the diagonal (5, 5) and a second entry at column 10 (5, 10). Now looking at row 10 we see an entry on the diagonal (10, 10) and a entry at column 5 (10, 5). These off-diagonal entries represent the conductance values between pores 5 and 10 (and between 10 and 5). The key point to note is that NO OTHER entries are present on either row. This means that the mass balance equations for pores 5 and 10 are not coupled to the rest of the equations. Another way to say is that pores 5 and 10 form their own independent matrix which can be solved in isolation since they don't exchange mass with any of the other pores...however, we can't solve this 'mini-system' because we have not specified any boundary conditions for it.  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a175a25",
   "metadata": {},
   "source": [
    "## Fixing Clustered Networks\n",
    "\n",
    "This is easy to see by eye, but we need to tell OpenPNM to find them so we can begin to fix the problem. In version 3 we added many new pore-scale models to the ``models.network`` libary, among them are `cluster_number` and `cluster_size`.  Let's add these two models to the network and see what we get:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9fd43314",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "══════════════════════════════════════════════════════════════════════════════\n",
      "net : <openpnm.network.Demo at 0x23cae22bc70>\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  #  Properties                                                   Valid Values\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  2  pore.coords                                                       25 / 25\n",
      "  3  throat.conns                                                      32 / 32\n",
      "  4  pore.coordination_number                                          25 / 25\n",
      "  5  pore.max_size                                                     25 / 25\n",
      "  6  throat.spacing                                                    32 / 32\n",
      "  7  pore.seed                                                         25 / 25\n",
      "  8  pore.diameter                                                     25 / 25\n",
      "  9  throat.max_size                                                   32 / 32\n",
      " 10  throat.diameter                                                   32 / 32\n",
      " 11  throat.cross_sectional_area                                       32 / 32\n",
      " 12  throat.hydraulic_size_factors                                     32 / 32\n",
      " 13  throat.diffusive_size_factors                                     32 / 32\n",
      " 14  throat.lens_volume                                                32 / 32\n",
      " 15  throat.length                                                     32 / 32\n",
      " 16  throat.total_volume                                               32 / 32\n",
      " 17  throat.volume                                                     32 / 32\n",
      " 18  pore.volume                                                       25 / 25\n",
      " 19  pore.cluster_number                                               25 / 25\n",
      " 20  pore.cluster_size                                                 25 / 25\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  #  Labels                                                 Assigned Locations\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  2  pore.surface                                                           16\n",
      "  3  throat.surface                                                         14\n",
      "  4  pore.left                                                               5\n",
      "  5  pore.right                                                              5\n",
      "  6  pore.front                                                              5\n",
      "  7  pore.back                                                               5\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n"
     ]
    }
   ],
   "source": [
    "pn.add_model(propname='pore.cluster_number',\n",
    "             model=op.models.network.cluster_number)\n",
    "pn.add_model(propname='pore.cluster_size',\n",
    "             model=op.models.network.cluster_size)\n",
    "print(pn)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "caae6fe7",
   "metadata": {},
   "source": [
    "We can see that cluster number and size have been added to the list of properties.  Let's inspect them:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "800998f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., 0., 0., 1., 2., 0., 0., 0., 1., 2., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0., 0., 0., 0., 0.])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pn['pore.cluster_number']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0aa0bc39",
   "metadata": {},
   "source": [
    "We can see that most pores a labeled 0, meaning they belong to cluster 0. However, there are a few with cluster numbers of 1 and  2, which we know correspond to the two small clusters in our network.  We *could* solve our current problem by trimming these pores, but let's do it the proper way. Had we not looked at the network visualization, We would not actually know that cluster 0 is the *main* cluster.  We can look at the *size* of each cluster instead:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "fa7b1ab5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([21., 21., 21., 21., 21.,  2.,  2., 21., 21., 21.,  2.,  2., 21.,\n",
       "       21., 21., 21., 21., 21., 21., 21., 21., 21., 21., 21., 21.])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pn['pore.cluster_size']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f929b5c",
   "metadata": {},
   "source": [
    "Now we can see that most pores belong to a large cluster of size 21, where there are a few on small clusters. Now we can clearly tell which pores should be trimmed:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "103c8bc8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Ps = pn['pore.cluster_size'] < 21\n",
    "op.topotools.trim(network=pn, pores=Ps)\n",
    "ax = op.visualization.plot_connections(pn)\n",
    "op.visualization.plot_coordinates(pn, ax=ax);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d8a8ed9",
   "metadata": {},
   "source": [
    "Now we can see only a single cluster.  Without even re-running the pore-scale models we can see that the pores with a cluster number other than 0 have been removed:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8175d00d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "       0., 0., 0., 0.])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pn['pore.cluster_number']"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
