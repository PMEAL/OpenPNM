{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Advection-Diffusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this example, we will learn how to perform an advection-diffusion simulation of a given chemical species through a `Cubic` network. The algorithm can be applied to more complex networks in the same manner as described in this example. For the sake of simplicity, a one layer 3D cubic network is used here. On `OpenPNM`, 4 different space discretization schemes for the advection-diffusion problem are available and consist of:\n",
    "\n",
    "1. Upwind\n",
    "2. Hybrid\n",
    "3. Powerlaw\n",
    "4. Exponential\n",
    "\n",
    "Depending on the Peclet number characterizing the transport (ratio of advective to diffusive fluxes), the solutions obtained using these schemes may differ. In order to achive a high numerical accuracy, the user should use either the `powerlaw` or the `exponential` schemes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import openpnm as op\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.axes_grid1.axes_divider import make_axes_locatable\n",
    "%config InlineBackend.figure_formats = ['svg']\n",
    "np.random.seed(10)\n",
    "%matplotlib inline\n",
    "ws = op.Workspace()\n",
    "ws.settings[\"loglevel\"] = 40\n",
    "np.set_printoptions(precision=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generating network\n",
    "First, we need to generate a `Cubic` network. For now, we stick to a one layer 3D network, but you might as well try more complex networks!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-06-24T11:31:04.826154Z",
     "iopub.status.busy": "2021-06-24T11:31:04.824562Z",
     "iopub.status.idle": "2021-06-24T11:31:05.555611Z",
     "shell.execute_reply": "2021-06-24T11:31:05.554119Z"
    }
   },
   "outputs": [],
   "source": [
    "shape = [20, 50]\n",
    "net = op.network.Cubic(shape=shape, spacing=1e-4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Add geometrical properties to the network\n",
    "Next, we need to add geometrical properties to the network. `OpenPNM` has many built-in models that you can manually add to your network. However, for convenience, you can add one of `OpenPNM`'s geometry model colletions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-06-24T11:31:05.562675Z",
     "iopub.status.busy": "2021-06-24T11:31:05.561281Z",
     "iopub.status.idle": "2021-06-24T11:31:05.581828Z",
     "shell.execute_reply": "2021-06-24T11:31:05.580666Z"
    }
   },
   "outputs": [],
   "source": [
    "mods = op.models.collections.geometry.spheres_and_cylinders()\n",
    "net.add_model_collection(mods)\n",
    "net.regenerate_models()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Add phase\n",
    "Next, we need to add a phase to our simulation. A phase object(s) contain(s) thermophysical information about the working fluid(s) in the simulation. `OpenPNM` has tons of prebuilt phases as well! For this simulation, we use air as our working fluid."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-06-24T11:31:05.589007Z",
     "iopub.status.busy": "2021-06-24T11:31:05.587632Z",
     "iopub.status.idle": "2021-06-24T11:31:05.591339Z",
     "shell.execute_reply": "2021-06-24T11:31:05.592328Z"
    }
   },
   "outputs": [],
   "source": [
    "air = op.phase.Air(network=net)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Add geometry-based thermophysical properties to the phase\n",
    "Finally, we need to add geometry-based thermophysical properties, such as \"diffusive conductance\", \"hydraulic conductance\", etc. Similar to geometrical properties, `OpenPNM` provides many built-in models that you can manually add. Again, for convenience, you can add one of `OpenPNM`'s model collections."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-06-24T11:31:05.598933Z",
     "iopub.status.busy": "2021-06-24T11:31:05.597671Z",
     "iopub.status.idle": "2021-06-24T11:31:05.681466Z",
     "shell.execute_reply": "2021-06-24T11:31:05.680209Z"
    }
   },
   "outputs": [],
   "source": [
    "mods = op.models.collections.physics.basic()\n",
    "air.add_model_collection(mods)\n",
    "air.regenerate_models()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Performing Stokes flow"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the advection diffusion algorithm assumes that velocity field is given. Naturally, we solve Stokes flow inside a pore network model to obtain the pressure field, and eventually the velocity field. Therefore, we need to run the `StokesFlow` algorithm prior to running our advection diffusion. There's a separate tutorial on how to run `StokesFlow` in `OpenPNM`, but here's a simple code snippet that does the job for us."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-06-24T11:31:05.689592Z",
     "iopub.status.busy": "2021-06-24T11:31:05.688199Z",
     "iopub.status.idle": "2021-06-24T11:31:05.840759Z",
     "shell.execute_reply": "2021-06-24T11:31:05.841382Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                                                                        \r"
     ]
    }
   ],
   "source": [
    "sf = op.algorithms.StokesFlow(network=net, phase=air)\n",
    "sf.set_value_BC(pores=net.pores('front'), values=102_325)\n",
    "sf.set_value_BC(pores=net.pores('back'), values=101_325)\n",
    "sf.run();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is essential that you attach the results from `StokesFlow` (i.e. pressure field) to the corresponding phase, since the results from any algorithm in `OpenPNM` are by default only attached to the algorithm object (in this case to `sf`). Here's how you can update your phase:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-06-24T11:31:05.845209Z",
     "iopub.status.busy": "2021-06-24T11:31:05.844634Z",
     "iopub.status.idle": "2021-06-24T11:31:05.846920Z",
     "shell.execute_reply": "2021-06-24T11:31:05.846327Z"
    }
   },
   "outputs": [],
   "source": [
    "air.update(sf.soln)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Performing advection-diffusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that everything is set up, it's time to perform our advection-diffusion simulation. For this purpose, we need to add corresponding algorithm to our simulation. As mentioned above, `OpenPNM` supports 4 different discretizations that may be used with the `AdvectionDiffusion` and `Dispersion` algorithms.\n",
    "Setting the discretization scheme can be performed when defining the physics model as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-06-24T11:31:05.850781Z",
     "iopub.status.busy": "2021-06-24T11:31:05.850199Z",
     "iopub.status.idle": "2021-06-24T11:31:05.855372Z",
     "shell.execute_reply": "2021-06-24T11:31:05.854856Z"
    }
   },
   "outputs": [],
   "source": [
    "mod = op.models.physics.ad_dif_conductance.ad_dif\n",
    "air.add_model(propname='throat.ad_dif_conductance', model=mod, s_scheme='powerlaw')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then, the advection-diffusion algorithm is defined by:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-06-24T11:31:05.859588Z",
     "iopub.status.busy": "2021-06-24T11:31:05.858997Z",
     "iopub.status.idle": "2021-06-24T11:31:05.861711Z",
     "shell.execute_reply": "2021-06-24T11:31:05.861172Z"
    }
   },
   "outputs": [],
   "source": [
    "ad = op.algorithms.AdvectionDiffusion(network=net, phase=air)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that `network` and `phase` are required parameters for pretty much every algorithm we add, since we need to specify on which network and for which phase do we want to run the algorithm."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that you can also specify the discretization scheme by modifying the `settings` of our `AdvectionDiffusion` algorithm. You can choose between `upwind`, `hybrid`, `powerlaw`, and `exponential`.\n",
    "It is important to note that the scheme specified within the algorithm's settings is only used when calling the `rate` method for post processing."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adding boundary conditions\n",
    "Next, we need to add some boundary conditions to the simulation. By default, `OpenPNM` assumes zero flux for the boundary pores."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-06-24T11:31:05.866571Z",
     "iopub.status.busy": "2021-06-24T11:31:05.865979Z",
     "iopub.status.idle": "2021-06-24T11:31:05.867689Z",
     "shell.execute_reply": "2021-06-24T11:31:05.868153Z"
    }
   },
   "outputs": [],
   "source": [
    "inlet  = net.pores('front') \n",
    "outlet = net.pores(['back', 'left', 'right'])\n",
    "ad.set_value_BC(pores=inlet, values=100.0, mode=\"overwrite\")\n",
    "ad.set_value_BC(pores=outlet, values=0.0, mode=\"overwrite\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`set_value_BC` applies the so-called \"Dirichlet\" boundary condition to the specified pores. Note that unless you want to apply a single value to all of the specified pores (like we just did), you must pass a list (or `ndarray`) as the `values` parameter."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running the algorithm\n",
    "Now, it's time to run the algorithm. This is done by calling the `run` method attached to the algorithm object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-06-24T11:31:05.871743Z",
     "iopub.status.busy": "2021-06-24T11:31:05.871174Z",
     "iopub.status.idle": "2021-06-24T11:31:05.890153Z",
     "shell.execute_reply": "2021-06-24T11:31:05.889623Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                                                                                        \r"
     ]
    }
   ],
   "source": [
    "ad.run();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Post processing\n",
    "When an algorithm is successfully run, the results are attached to the same object. To access the results, you need to know the quantity for which the algorithm was solving. For instance, `AdvectionDiffusion` solves for the quantity `pore.concentration`, which is somewhat intuitive. However, if you ever forget it, or wanted to manually check the quantity, you can take a look at the algorithm `settings`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-06-24T11:31:05.893618Z",
     "iopub.status.busy": "2021-06-24T11:31:05.893059Z",
     "iopub.status.idle": "2021-06-24T11:31:05.896109Z",
     "shell.execute_reply": "2021-06-24T11:31:05.896579Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "Settings                            Values\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "uuid                                7c2b757f-df1d-4b34-b961-39f11b60f239\n",
      "cache                               False\n",
      "conductance                         throat.ad_dif_conductance\n",
      "phase                               phase_01\n",
      "quantity                            pore.concentration\n",
      "variable_props                      TypedSet()\n",
      "f_rtol                              1e-06\n",
      "newton_maxiter                      5000\n",
      "relaxation_factor                   1.0\n",
      "x_rtol                              1e-06\n",
      "diffusive_conductance               throat.diffusive_conductance\n",
      "hydraulic_conductance               throat.hydraulic_conductance\n",
      "pressure                            pore.pressure\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n"
     ]
    }
   ],
   "source": [
    "print(ad.settings)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we know the quantity for which `AdvectionDiffusion` was solved, let's take a look at the results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-06-24T11:31:05.899659Z",
     "iopub.status.busy": "2021-06-24T11:31:05.899092Z",
     "iopub.status.idle": "2021-06-24T11:31:05.901305Z",
     "shell.execute_reply": "2021-06-24T11:31:05.900810Z"
    }
   },
   "outputs": [],
   "source": [
    "c = ad.soln['pore.concentration']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Heatmap\n",
    "Since the network is 2d, we can simply reshape the results in form of a 2d array similar to the shape of the network and plot the heatmap of it using `matplotlib`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-06-24T11:31:05.925038Z",
     "iopub.status.busy": "2021-06-24T11:31:05.921263Z",
     "iopub.status.idle": "2021-06-24T11:31:06.269123Z",
     "shell.execute_reply": "2021-06-24T11:31:06.270268Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       "  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"395.0125pt\" height=\"173.1825pt\" viewBox=\"0 0 395.0125 173.1825\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n",
       " <metadata>\n",
       "  <rdf:RDF xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n",
       "   <cc:Work>\n",
       "    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\n",
       "    <dc:date>2022-07-14T11:59:28.241343</dc:date>\n",
       "    <dc:format>image/svg+xml</dc:format>\n",
       "    <dc:creator>\n",
       "     <cc:Agent>\n",
       "      <dc:title>Matplotlib v3.5.1, https://matplotlib.org/</dc:title>\n",
       "     </cc:Agent>\n",
       "    </dc:creator>\n",
       "   </cc:Work>\n",
       "  </rdf:RDF>\n",
       " </metadata>\n",
       " <defs>\n",
       "  <style type=\"text/css\">*{stroke-linejoin: round; stroke-linecap: butt}</style>\n",
       " </defs>\n",
       " <g id=\"figure_1\">\n",
       "  <g id=\"patch_1\">\n",
       "   <path d=\"M -0 173.1825 \n",
       "L 395.0125 173.1825 \n",
       "L 395.0125 0 \n",
       "L -0 0 \n",
       "L -0 173.1825 \n",
       "z\n",
       "\" style=\"fill: none\"/>\n",
       "  </g>\n",
       "  <g id=\"axes_1\">\n",
       "   <g id=\"patch_2\">\n",
       "    <path d=\"M 26.925 149.304375 \n",
       "L 341.925 149.304375 \n",
       "L 341.925 23.304375 \n",
       "L 26.925 23.304375 \n",
       "z\n",
       "\" style=\"fill: #ffffff\"/>\n",
       "   </g>\n",
       "   <g clip-path=\"url(#p39c3be9256)\">\n",
       "    <image xlink:href=\"data:image/png;base64,\n",
       "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\" id=\"image82d0ebc0c6\" transform=\"scale(1 -1)translate(0 -126)\" x=\"26.925\" y=\"-23.304375\" width=\"315\" height=\"126\"/>\n",
       "   </g>\n",
       "   <g id=\"matplotlib.axis_1\">\n",
       "    <g id=\"xtick_1\">\n",
       "     <g id=\"line2d_1\">\n",
       "      <defs>\n",
       "       <path id=\"mf8899e88e5\" d=\"M 0 0 \n",
       "L 0 3.5 \n",
       "\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </defs>\n",
       "      <g>\n",
       "       <use xlink:href=\"#mf8899e88e5\" x=\"30.075\" y=\"149.304375\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_1\">\n",
       "      <!-- 0 -->\n",
       "      <g transform=\"translate(26.89375 163.902813)scale(0.1 -0.1)\">\n",
       "       <defs>\n",
       "        <path id=\"DejaVuSans-30\" d=\"M 2034 4250 \n",
       "Q 1547 4250 1301 3770 \n",
       "Q 1056 3291 1056 2328 \n",
       "Q 1056 1369 1301 889 \n",
       "Q 1547 409 2034 409 \n",
       "Q 2525 409 2770 889 \n",
       "Q 3016 1369 3016 2328 \n",
       "Q 3016 3291 2770 3770 \n",
       "Q 2525 4250 2034 4250 \n",
       "z\n",
       "M 2034 4750 \n",
       "Q 2819 4750 3233 4129 \n",
       "Q 3647 3509 3647 2328 \n",
       "Q 3647 1150 3233 529 \n",
       "Q 2819 -91 2034 -91 \n",
       "Q 1250 -91 836 529 \n",
       "Q 422 1150 422 2328 \n",
       "Q 422 3509 836 4129 \n",
       "Q 1250 4750 2034 4750 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       </defs>\n",
       "       <use xlink:href=\"#DejaVuSans-30\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"xtick_2\">\n",
       "     <g id=\"line2d_2\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#mf8899e88e5\" x=\"93.075\" y=\"149.304375\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_2\">\n",
       "      <!-- 10 -->\n",
       "      <g transform=\"translate(86.7125 163.902813)scale(0.1 -0.1)\">\n",
       "       <defs>\n",
       "        <path id=\"DejaVuSans-31\" d=\"M 794 531 \n",
       "L 1825 531 \n",
       "L 1825 4091 \n",
       "L 703 3866 \n",
       "L 703 4441 \n",
       "L 1819 4666 \n",
       "L 2450 4666 \n",
       "L 2450 531 \n",
       "L 3481 531 \n",
       "L 3481 0 \n",
       "L 794 0 \n",
       "L 794 531 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       </defs>\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\n",
       "       <use xlink:href=\"#DejaVuSans-30\" x=\"63.623047\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"xtick_3\">\n",
       "     <g id=\"line2d_3\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#mf8899e88e5\" x=\"156.075\" y=\"149.304375\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_3\">\n",
       "      <!-- 20 -->\n",
       "      <g transform=\"translate(149.7125 163.902813)scale(0.1 -0.1)\">\n",
       "       <defs>\n",
       "        <path id=\"DejaVuSans-32\" d=\"M 1228 531 \n",
       "L 3431 531 \n",
       "L 3431 0 \n",
       "L 469 0 \n",
       "L 469 531 \n",
       "Q 828 903 1448 1529 \n",
       "Q 2069 2156 2228 2338 \n",
       "Q 2531 2678 2651 2914 \n",
       "Q 2772 3150 2772 3378 \n",
       "Q 2772 3750 2511 3984 \n",
       "Q 2250 4219 1831 4219 \n",
       "Q 1534 4219 1204 4116 \n",
       "Q 875 4013 500 3803 \n",
       "L 500 4441 \n",
       "Q 881 4594 1212 4672 \n",
       "Q 1544 4750 1819 4750 \n",
       "Q 2544 4750 2975 4387 \n",
       "Q 3406 4025 3406 3419 \n",
       "Q 3406 3131 3298 2873 \n",
       "Q 3191 2616 2906 2266 \n",
       "Q 2828 2175 2409 1742 \n",
       "Q 1991 1309 1228 531 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       </defs>\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\n",
       "       <use xlink:href=\"#DejaVuSans-30\" x=\"63.623047\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"xtick_4\">\n",
       "     <g id=\"line2d_4\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#mf8899e88e5\" x=\"219.075\" y=\"149.304375\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_4\">\n",
       "      <!-- 30 -->\n",
       "      <g transform=\"translate(212.7125 163.902813)scale(0.1 -0.1)\">\n",
       "       <defs>\n",
       "        <path id=\"DejaVuSans-33\" d=\"M 2597 2516 \n",
       "Q 3050 2419 3304 2112 \n",
       "Q 3559 1806 3559 1356 \n",
       "Q 3559 666 3084 287 \n",
       "Q 2609 -91 1734 -91 \n",
       "Q 1441 -91 1130 -33 \n",
       "Q 819 25 488 141 \n",
       "L 488 750 \n",
       "Q 750 597 1062 519 \n",
       "Q 1375 441 1716 441 \n",
       "Q 2309 441 2620 675 \n",
       "Q 2931 909 2931 1356 \n",
       "Q 2931 1769 2642 2001 \n",
       "Q 2353 2234 1838 2234 \n",
       "L 1294 2234 \n",
       "L 1294 2753 \n",
       "L 1863 2753 \n",
       "Q 2328 2753 2575 2939 \n",
       "Q 2822 3125 2822 3475 \n",
       "Q 2822 3834 2567 4026 \n",
       "Q 2313 4219 1838 4219 \n",
       "Q 1578 4219 1281 4162 \n",
       "Q 984 4106 628 3988 \n",
       "L 628 4550 \n",
       "Q 988 4650 1302 4700 \n",
       "Q 1616 4750 1894 4750 \n",
       "Q 2613 4750 3031 4423 \n",
       "Q 3450 4097 3450 3541 \n",
       "Q 3450 3153 3228 2886 \n",
       "Q 3006 2619 2597 2516 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       </defs>\n",
       "       <use xlink:href=\"#DejaVuSans-33\"/>\n",
       "       <use xlink:href=\"#DejaVuSans-30\" x=\"63.623047\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"xtick_5\">\n",
       "     <g id=\"line2d_5\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#mf8899e88e5\" x=\"282.075\" y=\"149.304375\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_5\">\n",
       "      <!-- 40 -->\n",
       "      <g transform=\"translate(275.7125 163.902813)scale(0.1 -0.1)\">\n",
       "       <defs>\n",
       "        <path id=\"DejaVuSans-34\" d=\"M 2419 4116 \n",
       "L 825 1625 \n",
       "L 2419 1625 \n",
       "L 2419 4116 \n",
       "z\n",
       "M 2253 4666 \n",
       "L 3047 4666 \n",
       "L 3047 1625 \n",
       "L 3713 1625 \n",
       "L 3713 1100 \n",
       "L 3047 1100 \n",
       "L 3047 0 \n",
       "L 2419 0 \n",
       "L 2419 1100 \n",
       "L 313 1100 \n",
       "L 313 1709 \n",
       "L 2253 4666 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       </defs>\n",
       "       <use xlink:href=\"#DejaVuSans-34\"/>\n",
       "       <use xlink:href=\"#DejaVuSans-30\" x=\"63.623047\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "   </g>\n",
       "   <g id=\"matplotlib.axis_2\">\n",
       "    <g id=\"ytick_1\">\n",
       "     <g id=\"line2d_6\">\n",
       "      <defs>\n",
       "       <path id=\"m5f408efa2d\" d=\"M 0 0 \n",
       "L -3.5 0 \n",
       "\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </defs>\n",
       "      <g>\n",
       "       <use xlink:href=\"#m5f408efa2d\" x=\"26.925\" y=\"26.454375\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_6\">\n",
       "      <!-- 0 -->\n",
       "      <g transform=\"translate(13.5625 30.253594)scale(0.1 -0.1)\">\n",
       "       <use xlink:href=\"#DejaVuSans-30\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"ytick_2\">\n",
       "     <g id=\"line2d_7\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#m5f408efa2d\" x=\"26.925\" y=\"57.954375\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_7\">\n",
       "      <!-- 5 -->\n",
       "      <g transform=\"translate(13.5625 61.753594)scale(0.1 -0.1)\">\n",
       "       <defs>\n",
       "        <path id=\"DejaVuSans-35\" d=\"M 691 4666 \n",
       "L 3169 4666 \n",
       "L 3169 4134 \n",
       "L 1269 4134 \n",
       "L 1269 2991 \n",
       "Q 1406 3038 1543 3061 \n",
       "Q 1681 3084 1819 3084 \n",
       "Q 2600 3084 3056 2656 \n",
       "Q 3513 2228 3513 1497 \n",
       "Q 3513 744 3044 326 \n",
       "Q 2575 -91 1722 -91 \n",
       "Q 1428 -91 1123 -41 \n",
       "Q 819 9 494 109 \n",
       "L 494 744 \n",
       "Q 775 591 1075 516 \n",
       "Q 1375 441 1709 441 \n",
       "Q 2250 441 2565 725 \n",
       "Q 2881 1009 2881 1497 \n",
       "Q 2881 1984 2565 2268 \n",
       "Q 2250 2553 1709 2553 \n",
       "Q 1456 2553 1204 2497 \n",
       "Q 953 2441 691 2322 \n",
       "L 691 4666 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       </defs>\n",
       "       <use xlink:href=\"#DejaVuSans-35\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"ytick_3\">\n",
       "     <g id=\"line2d_8\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#m5f408efa2d\" x=\"26.925\" y=\"89.454375\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_8\">\n",
       "      <!-- 10 -->\n",
       "      <g transform=\"translate(7.2 93.253594)scale(0.1 -0.1)\">\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\n",
       "       <use xlink:href=\"#DejaVuSans-30\" x=\"63.623047\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"ytick_4\">\n",
       "     <g id=\"line2d_9\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#m5f408efa2d\" x=\"26.925\" y=\"120.954375\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_9\">\n",
       "      <!-- 15 -->\n",
       "      <g transform=\"translate(7.2 124.753594)scale(0.1 -0.1)\">\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\n",
       "       <use xlink:href=\"#DejaVuSans-35\" x=\"63.623047\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "   </g>\n",
       "   <g id=\"patch_3\">\n",
       "    <path d=\"M 26.925 149.304375 \n",
       "L 26.925 23.304375 \n",
       "\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n",
       "   </g>\n",
       "   <g id=\"patch_4\">\n",
       "    <path d=\"M 341.925 149.304375 \n",
       "L 341.925 23.304375 \n",
       "\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n",
       "   </g>\n",
       "   <g id=\"patch_5\">\n",
       "    <path d=\"M 26.925 149.304375 \n",
       "L 341.925 149.304375 \n",
       "\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n",
       "   </g>\n",
       "   <g id=\"patch_6\">\n",
       "    <path d=\"M 26.925 23.304375 \n",
       "L 341.925 23.304375 \n",
       "\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n",
       "   </g>\n",
       "   <g id=\"text_10\">\n",
       "    <!-- Concentration (mol/m$^3$) -->\n",
       "    <g transform=\"translate(113.445 17.304375)scale(0.12 -0.12)\">\n",
       "     <defs>\n",
       "      <path id=\"DejaVuSans-43\" d=\"M 4122 4306 \n",
       "L 4122 3641 \n",
       "Q 3803 3938 3442 4084 \n",
       "Q 3081 4231 2675 4231 \n",
       "Q 1875 4231 1450 3742 \n",
       "Q 1025 3253 1025 2328 \n",
       "Q 1025 1406 1450 917 \n",
       "Q 1875 428 2675 428 \n",
       "Q 3081 428 3442 575 \n",
       "Q 3803 722 4122 1019 \n",
       "L 4122 359 \n",
       "Q 3791 134 3420 21 \n",
       "Q 3050 -91 2638 -91 \n",
       "Q 1578 -91 968 557 \n",
       "Q 359 1206 359 2328 \n",
       "Q 359 3453 968 4101 \n",
       "Q 1578 4750 2638 4750 \n",
       "Q 3056 4750 3426 4639 \n",
       "Q 3797 4528 4122 4306 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "      <path id=\"DejaVuSans-6f\" d=\"M 1959 3097 \n",
       "Q 1497 3097 1228 2736 \n",
       "Q 959 2375 959 1747 \n",
       "Q 959 1119 1226 758 \n",
       "Q 1494 397 1959 397 \n",
       "Q 2419 397 2687 759 \n",
       "Q 2956 1122 2956 1747 \n",
       "Q 2956 2369 2687 2733 \n",
       "Q 2419 3097 1959 3097 \n",
       "z\n",
       "M 1959 3584 \n",
       "Q 2709 3584 3137 3096 \n",
       "Q 3566 2609 3566 1747 \n",
       "Q 3566 888 3137 398 \n",
       "Q 2709 -91 1959 -91 \n",
       "Q 1206 -91 779 398 \n",
       "Q 353 888 353 1747 \n",
       "Q 353 2609 779 3096 \n",
       "Q 1206 3584 1959 3584 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "      <path id=\"DejaVuSans-6e\" d=\"M 3513 2113 \n",
       "L 3513 0 \n",
       "L 2938 0 \n",
       "L 2938 2094 \n",
       "Q 2938 2591 2744 2837 \n",
       "Q 2550 3084 2163 3084 \n",
       "Q 1697 3084 1428 2787 \n",
       "Q 1159 2491 1159 1978 \n",
       "L 1159 0 \n",
       "L 581 0 \n",
       "L 581 3500 \n",
       "L 1159 3500 \n",
       "L 1159 2956 \n",
       "Q 1366 3272 1645 3428 \n",
       "Q 1925 3584 2291 3584 \n",
       "Q 2894 3584 3203 3211 \n",
       "Q 3513 2838 3513 2113 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "      <path id=\"DejaVuSans-63\" d=\"M 3122 3366 \n",
       "L 3122 2828 \n",
       "Q 2878 2963 2633 3030 \n",
       "Q 2388 3097 2138 3097 \n",
       "Q 1578 3097 1268 2742 \n",
       "Q 959 2388 959 1747 \n",
       "Q 959 1106 1268 751 \n",
       "Q 1578 397 2138 397 \n",
       "Q 2388 397 2633 464 \n",
       "Q 2878 531 3122 666 \n",
       "L 3122 134 \n",
       "Q 2881 22 2623 -34 \n",
       "Q 2366 -91 2075 -91 \n",
       "Q 1284 -91 818 406 \n",
       "Q 353 903 353 1747 \n",
       "Q 353 2603 823 3093 \n",
       "Q 1294 3584 2113 3584 \n",
       "Q 2378 3584 2631 3529 \n",
       "Q 2884 3475 3122 3366 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "      <path id=\"DejaVuSans-65\" d=\"M 3597 1894 \n",
       "L 3597 1613 \n",
       "L 953 1613 \n",
       "Q 991 1019 1311 708 \n",
       "Q 1631 397 2203 397 \n",
       "Q 2534 397 2845 478 \n",
       "Q 3156 559 3463 722 \n",
       "L 3463 178 \n",
       "Q 3153 47 2828 -22 \n",
       "Q 2503 -91 2169 -91 \n",
       "Q 1331 -91 842 396 \n",
       "Q 353 884 353 1716 \n",
       "Q 353 2575 817 3079 \n",
       "Q 1281 3584 2069 3584 \n",
       "Q 2775 3584 3186 3129 \n",
       "Q 3597 2675 3597 1894 \n",
       "z\n",
       "M 3022 2063 \n",
       "Q 3016 2534 2758 2815 \n",
       "Q 2500 3097 2075 3097 \n",
       "Q 1594 3097 1305 2825 \n",
       "Q 1016 2553 972 2059 \n",
       "L 3022 2063 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "      <path id=\"DejaVuSans-74\" d=\"M 1172 4494 \n",
       "L 1172 3500 \n",
       "L 2356 3500 \n",
       "L 2356 3053 \n",
       "L 1172 3053 \n",
       "L 1172 1153 \n",
       "Q 1172 725 1289 603 \n",
       "Q 1406 481 1766 481 \n",
       "L 2356 481 \n",
       "L 2356 0 \n",
       "L 1766 0 \n",
       "Q 1100 0 847 248 \n",
       "Q 594 497 594 1153 \n",
       "L 594 3053 \n",
       "L 172 3053 \n",
       "L 172 3500 \n",
       "L 594 3500 \n",
       "L 594 4494 \n",
       "L 1172 4494 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "      <path id=\"DejaVuSans-72\" d=\"M 2631 2963 \n",
       "Q 2534 3019 2420 3045 \n",
       "Q 2306 3072 2169 3072 \n",
       "Q 1681 3072 1420 2755 \n",
       "Q 1159 2438 1159 1844 \n",
       "L 1159 0 \n",
       "L 581 0 \n",
       "L 581 3500 \n",
       "L 1159 3500 \n",
       "L 1159 2956 \n",
       "Q 1341 3275 1631 3429 \n",
       "Q 1922 3584 2338 3584 \n",
       "Q 2397 3584 2469 3576 \n",
       "Q 2541 3569 2628 3553 \n",
       "L 2631 2963 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "      <path id=\"DejaVuSans-61\" d=\"M 2194 1759 \n",
       "Q 1497 1759 1228 1600 \n",
       "Q 959 1441 959 1056 \n",
       "Q 959 750 1161 570 \n",
       "Q 1363 391 1709 391 \n",
       "Q 2188 391 2477 730 \n",
       "Q 2766 1069 2766 1631 \n",
       "L 2766 1759 \n",
       "L 2194 1759 \n",
       "z\n",
       "M 3341 1997 \n",
       "L 3341 0 \n",
       "L 2766 0 \n",
       "L 2766 531 \n",
       "Q 2569 213 2275 61 \n",
       "Q 1981 -91 1556 -91 \n",
       "Q 1019 -91 701 211 \n",
       "Q 384 513 384 1019 \n",
       "Q 384 1609 779 1909 \n",
       "Q 1175 2209 1959 2209 \n",
       "L 2766 2209 \n",
       "L 2766 2266 \n",
       "Q 2766 2663 2505 2880 \n",
       "Q 2244 3097 1772 3097 \n",
       "Q 1472 3097 1187 3025 \n",
       "Q 903 2953 641 2809 \n",
       "L 641 3341 \n",
       "Q 956 3463 1253 3523 \n",
       "Q 1550 3584 1831 3584 \n",
       "Q 2591 3584 2966 3190 \n",
       "Q 3341 2797 3341 1997 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "      <path id=\"DejaVuSans-69\" d=\"M 603 3500 \n",
       "L 1178 3500 \n",
       "L 1178 0 \n",
       "L 603 0 \n",
       "L 603 3500 \n",
       "z\n",
       "M 603 4863 \n",
       "L 1178 4863 \n",
       "L 1178 4134 \n",
       "L 603 4134 \n",
       "L 603 4863 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "      <path id=\"DejaVuSans-20\" transform=\"scale(0.015625)\"/>\n",
       "      <path id=\"DejaVuSans-28\" d=\"M 1984 4856 \n",
       "Q 1566 4138 1362 3434 \n",
       "Q 1159 2731 1159 2009 \n",
       "Q 1159 1288 1364 580 \n",
       "Q 1569 -128 1984 -844 \n",
       "L 1484 -844 \n",
       "Q 1016 -109 783 600 \n",
       "Q 550 1309 550 2009 \n",
       "Q 550 2706 781 3412 \n",
       "Q 1013 4119 1484 4856 \n",
       "L 1984 4856 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "      <path id=\"DejaVuSans-6d\" d=\"M 3328 2828 \n",
       "Q 3544 3216 3844 3400 \n",
       "Q 4144 3584 4550 3584 \n",
       "Q 5097 3584 5394 3201 \n",
       "Q 5691 2819 5691 2113 \n",
       "L 5691 0 \n",
       "L 5113 0 \n",
       "L 5113 2094 \n",
       "Q 5113 2597 4934 2840 \n",
       "Q 4756 3084 4391 3084 \n",
       "Q 3944 3084 3684 2787 \n",
       "Q 3425 2491 3425 1978 \n",
       "L 3425 0 \n",
       "L 2847 0 \n",
       "L 2847 2094 \n",
       "Q 2847 2600 2669 2842 \n",
       "Q 2491 3084 2119 3084 \n",
       "Q 1678 3084 1418 2786 \n",
       "Q 1159 2488 1159 1978 \n",
       "L 1159 0 \n",
       "L 581 0 \n",
       "L 581 3500 \n",
       "L 1159 3500 \n",
       "L 1159 2956 \n",
       "Q 1356 3278 1631 3431 \n",
       "Q 1906 3584 2284 3584 \n",
       "Q 2666 3584 2933 3390 \n",
       "Q 3200 3197 3328 2828 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "      <path id=\"DejaVuSans-6c\" d=\"M 603 4863 \n",
       "L 1178 4863 \n",
       "L 1178 0 \n",
       "L 603 0 \n",
       "L 603 4863 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "      <path id=\"DejaVuSans-2f\" d=\"M 1625 4666 \n",
       "L 2156 4666 \n",
       "L 531 -594 \n",
       "L 0 -594 \n",
       "L 1625 4666 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "      <path id=\"DejaVuSans-29\" d=\"M 513 4856 \n",
       "L 1013 4856 \n",
       "Q 1481 4119 1714 3412 \n",
       "Q 1947 2706 1947 2009 \n",
       "Q 1947 1309 1714 600 \n",
       "Q 1481 -109 1013 -844 \n",
       "L 513 -844 \n",
       "Q 928 -128 1133 580 \n",
       "Q 1338 1288 1338 2009 \n",
       "Q 1338 2731 1133 3434 \n",
       "Q 928 4138 513 4856 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "     </defs>\n",
       "     <use xlink:href=\"#DejaVuSans-43\" transform=\"translate(0 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(69.824219 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-6e\" transform=\"translate(131.005859 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-63\" transform=\"translate(194.384766 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-65\" transform=\"translate(249.365234 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-6e\" transform=\"translate(310.888672 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-74\" transform=\"translate(374.267578 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-72\" transform=\"translate(413.476562 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-61\" transform=\"translate(454.589844 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-74\" transform=\"translate(515.869141 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-69\" transform=\"translate(555.078125 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(582.861328 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-6e\" transform=\"translate(644.042969 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-20\" transform=\"translate(707.421875 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-28\" transform=\"translate(739.208984 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-6d\" transform=\"translate(778.222656 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(875.634766 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-6c\" transform=\"translate(936.816406 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-2f\" transform=\"translate(964.599609 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-6d\" transform=\"translate(998.291016 0.765625)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-33\" transform=\"translate(1096.660156 39.046875)scale(0.7)\"/>\n",
       "     <use xlink:href=\"#DejaVuSans-29\" transform=\"translate(1143.930664 0.765625)\"/>\n",
       "    </g>\n",
       "   </g>\n",
       "  </g>\n",
       "  <g id=\"axes_2\">\n",
       "   <g id=\"patch_7\">\n",
       "    <path d=\"M 349.125 149.304375 \n",
       "L 361.725 149.304375 \n",
       "L 361.725 23.304375 \n",
       "L 349.125 23.304375 \n",
       "z\n",
       "\" style=\"fill: #ffffff\"/>\n",
       "   </g>\n",
       "   <g id=\"patch_8\">\n",
       "    <path clip-path=\"url(#pe2b787d06f)\" style=\"fill: #ffffff; stroke: #ffffff; stroke-width: 0.01; stroke-linejoin: miter\"/>\n",
       "   </g>\n",
       "   <image xlink:href=\"data:image/png;base64,\n",
       "iVBORw0KGgoAAAANSUhEUgAAAA0AAAB+CAYAAAD/XZsTAAAA5ElEQVR4nO2Y2w0CMQwE144TXWHUQP+FAKEGz8cqoLv/0azXkHvEI59bzatijC4DIY20mY6eCcVTIhOB0laEbaY9AphIvM1mAvGcJgIZTa5fxO6L4ExwT22GVn64qX+CeYs4HLqLkKSSL16/8T8t4p7JDSnbbw0/sCcwk9ifkJjO3hMyha+IcMXzQekzkfYyP31osCJcphE2E5sJQDPffaiIqUh7zGSMR9ojJranANC0FTFZPAIdHo9BL5vJFW+dXcTyVS4Uz7dccEZc6NwTuH2uAN8jJoLA82jNAFAJfGSfUW3oC2FpZP4cvjE4AAAAAElFTkSuQmCC\" id=\"imageecdeb0d2bf\" transform=\"scale(1 -1)translate(0 -126)\" x=\"349\" y=\"-23\" width=\"13\" height=\"126\"/>\n",
       "   <g id=\"matplotlib.axis_3\">\n",
       "    <g id=\"ytick_5\">\n",
       "     <g id=\"line2d_10\">\n",
       "      <defs>\n",
       "       <path id=\"md44aaee07f\" d=\"M 0 0 \n",
       "L 3.5 0 \n",
       "\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </defs>\n",
       "      <g>\n",
       "       <use xlink:href=\"#md44aaee07f\" x=\"361.725\" y=\"149.304375\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_11\">\n",
       "      <!-- 0 -->\n",
       "      <g transform=\"translate(368.725 153.103594)scale(0.1 -0.1)\">\n",
       "       <use xlink:href=\"#DejaVuSans-30\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"ytick_6\">\n",
       "     <g id=\"line2d_11\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#md44aaee07f\" x=\"361.725\" y=\"124.104375\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_12\">\n",
       "      <!-- 20 -->\n",
       "      <g transform=\"translate(368.725 127.903594)scale(0.1 -0.1)\">\n",
       "       <use xlink:href=\"#DejaVuSans-32\"/>\n",
       "       <use xlink:href=\"#DejaVuSans-30\" x=\"63.623047\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"ytick_7\">\n",
       "     <g id=\"line2d_12\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#md44aaee07f\" x=\"361.725\" y=\"98.904375\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_13\">\n",
       "      <!-- 40 -->\n",
       "      <g transform=\"translate(368.725 102.703594)scale(0.1 -0.1)\">\n",
       "       <use xlink:href=\"#DejaVuSans-34\"/>\n",
       "       <use xlink:href=\"#DejaVuSans-30\" x=\"63.623047\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"ytick_8\">\n",
       "     <g id=\"line2d_13\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#md44aaee07f\" x=\"361.725\" y=\"73.704375\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_14\">\n",
       "      <!-- 60 -->\n",
       "      <g transform=\"translate(368.725 77.503594)scale(0.1 -0.1)\">\n",
       "       <defs>\n",
       "        <path id=\"DejaVuSans-36\" d=\"M 2113 2584 \n",
       "Q 1688 2584 1439 2293 \n",
       "Q 1191 2003 1191 1497 \n",
       "Q 1191 994 1439 701 \n",
       "Q 1688 409 2113 409 \n",
       "Q 2538 409 2786 701 \n",
       "Q 3034 994 3034 1497 \n",
       "Q 3034 2003 2786 2293 \n",
       "Q 2538 2584 2113 2584 \n",
       "z\n",
       "M 3366 4563 \n",
       "L 3366 3988 \n",
       "Q 3128 4100 2886 4159 \n",
       "Q 2644 4219 2406 4219 \n",
       "Q 1781 4219 1451 3797 \n",
       "Q 1122 3375 1075 2522 \n",
       "Q 1259 2794 1537 2939 \n",
       "Q 1816 3084 2150 3084 \n",
       "Q 2853 3084 3261 2657 \n",
       "Q 3669 2231 3669 1497 \n",
       "Q 3669 778 3244 343 \n",
       "Q 2819 -91 2113 -91 \n",
       "Q 1303 -91 875 529 \n",
       "Q 447 1150 447 2328 \n",
       "Q 447 3434 972 4092 \n",
       "Q 1497 4750 2381 4750 \n",
       "Q 2619 4750 2861 4703 \n",
       "Q 3103 4656 3366 4563 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       </defs>\n",
       "       <use xlink:href=\"#DejaVuSans-36\"/>\n",
       "       <use xlink:href=\"#DejaVuSans-30\" x=\"63.623047\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"ytick_9\">\n",
       "     <g id=\"line2d_14\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#md44aaee07f\" x=\"361.725\" y=\"48.504375\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_15\">\n",
       "      <!-- 80 -->\n",
       "      <g transform=\"translate(368.725 52.303594)scale(0.1 -0.1)\">\n",
       "       <defs>\n",
       "        <path id=\"DejaVuSans-38\" d=\"M 2034 2216 \n",
       "Q 1584 2216 1326 1975 \n",
       "Q 1069 1734 1069 1313 \n",
       "Q 1069 891 1326 650 \n",
       "Q 1584 409 2034 409 \n",
       "Q 2484 409 2743 651 \n",
       "Q 3003 894 3003 1313 \n",
       "Q 3003 1734 2745 1975 \n",
       "Q 2488 2216 2034 2216 \n",
       "z\n",
       "M 1403 2484 \n",
       "Q 997 2584 770 2862 \n",
       "Q 544 3141 544 3541 \n",
       "Q 544 4100 942 4425 \n",
       "Q 1341 4750 2034 4750 \n",
       "Q 2731 4750 3128 4425 \n",
       "Q 3525 4100 3525 3541 \n",
       "Q 3525 3141 3298 2862 \n",
       "Q 3072 2584 2669 2484 \n",
       "Q 3125 2378 3379 2068 \n",
       "Q 3634 1759 3634 1313 \n",
       "Q 3634 634 3220 271 \n",
       "Q 2806 -91 2034 -91 \n",
       "Q 1263 -91 848 271 \n",
       "Q 434 634 434 1313 \n",
       "Q 434 1759 690 2068 \n",
       "Q 947 2378 1403 2484 \n",
       "z\n",
       "M 1172 3481 \n",
       "Q 1172 3119 1398 2916 \n",
       "Q 1625 2713 2034 2713 \n",
       "Q 2441 2713 2670 2916 \n",
       "Q 2900 3119 2900 3481 \n",
       "Q 2900 3844 2670 4047 \n",
       "Q 2441 4250 2034 4250 \n",
       "Q 1625 4250 1398 4047 \n",
       "Q 1172 3844 1172 3481 \n",
       "z\n",
       "\" transform=\"scale(0.015625)\"/>\n",
       "       </defs>\n",
       "       <use xlink:href=\"#DejaVuSans-38\"/>\n",
       "       <use xlink:href=\"#DejaVuSans-30\" x=\"63.623047\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "    <g id=\"ytick_10\">\n",
       "     <g id=\"line2d_15\">\n",
       "      <g>\n",
       "       <use xlink:href=\"#md44aaee07f\" x=\"361.725\" y=\"23.304375\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "     <g id=\"text_16\">\n",
       "      <!-- 100 -->\n",
       "      <g transform=\"translate(368.725 27.103594)scale(0.1 -0.1)\">\n",
       "       <use xlink:href=\"#DejaVuSans-31\"/>\n",
       "       <use xlink:href=\"#DejaVuSans-30\" x=\"63.623047\"/>\n",
       "       <use xlink:href=\"#DejaVuSans-30\" x=\"127.246094\"/>\n",
       "      </g>\n",
       "     </g>\n",
       "    </g>\n",
       "   </g>\n",
       "   <g id=\"LineCollection_1\"/>\n",
       "   <g id=\"patch_9\">\n",
       "    <path d=\"M 349.125 149.304375 \n",
       "L 355.425 149.304375 \n",
       "L 361.725 149.304375 \n",
       "L 361.725 23.304375 \n",
       "L 355.425 23.304375 \n",
       "L 349.125 23.304375 \n",
       "L 349.125 149.304375 \n",
       "z\n",
       "\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n",
       "   </g>\n",
       "  </g>\n",
       " </g>\n",
       " <defs>\n",
       "  <clipPath id=\"p39c3be9256\">\n",
       "   <rect x=\"26.925\" y=\"23.304375\" width=\"315\" height=\"126\"/>\n",
       "  </clipPath>\n",
       "  <clipPath id=\"pe2b787d06f\">\n",
       "   <rect x=\"349.125\" y=\"23.304375\" width=\"12.6\" height=\"126\"/>\n",
       "  </clipPath>\n",
       " </defs>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(6,3))\n",
    "im = ax.imshow(c.reshape(shape))\n",
    "ax.set_title('Concentration (mol/m$^3$)');\n",
    "divider = make_axes_locatable(ax)\n",
    "cax = divider.append_axes(\"right\", size=\"4%\", pad=0.1)\n",
    "plt.colorbar(im, cax=cax);"
   ]
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
