{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Network Representation, Queries, and Manipulation\n",
    "\n",
    "To understand the how to query and manipulate the network, we'll first cover the various forms of network represenation. Specifically, OpenPNM uses adjacency matrix to represent topology, but occassionally invokes the incidence matrix since this makes it easier for some queries. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import openpnm as op\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Adjacency Matrix\n",
    "\n",
    "The basic adjacency matrix is an Np-by-Np array of 1's and 0's, where a 1 in location `[i, j]` indicates that pores `i` and `j` are connected. Consider a simple network:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [],
   "source": [
    "pn = op.network.Cubic(shape=[3, 2, 1], connectivity=26)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It's adjacency matrix can be generated as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 1 1 1 0 0]\n",
      " [1 0 1 1 0 0]\n",
      " [1 1 0 1 1 1]\n",
      " [1 1 1 0 1 1]\n",
      " [0 0 1 1 0 1]\n",
      " [0 0 1 1 1 0]]\n"
     ]
    }
   ],
   "source": [
    "am = pn.create_adjacency_matrix().todense()\n",
    "print(am)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The adjacency matrix can also be plotted as a image for a helpful visualization:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1, 1, figsize=[5, 5])\n",
    "ax.imshow(am);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are a few notable features to point out:\n",
    "* The matrix is symmetrical, since pore `i` connects to `j` and `j` connects to `i`\n",
    "* Each row contains only a few entries since a given pores only has a few neighbors.  It may not be obvious above since the network is small, but as the network grows to millions of pores, each pore only has on the order of 10 neighbors.\n",
    "* You can find which pores are neighbors of pore `i` by finding the locations on non-zeros in row `i` of the adjacency matrix\n",
    "* No entries are found in the diagonal since this would indicate that a pore connects with itself which is not very likely\n",
    "* Since each pair of pores is connected by a single throat then each nonzero entry in the matrix corresponds to a throat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### COO Sparse Format\n",
    "\n",
    "The fact that each row contains very few entries suggests that the matrix should be represented with a sparse format. This is especially important when we start to consider networks with millions of pores which would require a very large amount of memory to store an array of mostly 0's. The most intuitive sparse storage scheme is the COOrdinate format. Since the matrix is symmetrical, we only need to store the upper (or lower) triangular part.  This gives:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  (0, 1)\t1\n",
      "  (2, 3)\t1\n",
      "  (4, 5)\t1\n",
      "  (0, 2)\t1\n",
      "  (1, 3)\t1\n",
      "  (2, 4)\t1\n",
      "  (3, 5)\t1\n",
      "  (0, 3)\t1\n",
      "  (2, 5)\t1\n",
      "  (1, 2)\t1\n",
      "  (3, 4)\t1\n"
     ]
    }
   ],
   "source": [
    "am = pn.create_adjacency_matrix(triu=True)\n",
    "print(am)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first two columns are the pore indices of the connected pores.  The third column is the value stored in the matrix, which in the standard adjacency matrix is 1.  However, it is convenient to note throat indices are *defined* by this list, meaning that pores 0 and 1 are connected by throat 0, pores 2 and 3 are connected by throat 1, and so on. Putting the throat indices into the adjacency matrix gives:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  (0, 1)\t0\n",
      "  (2, 3)\t1\n",
      "  (4, 5)\t2\n",
      "  (0, 2)\t3\n",
      "  (1, 3)\t4\n",
      "  (2, 4)\t5\n",
      "  (3, 5)\t6\n",
      "  (0, 3)\t7\n",
      "  (2, 5)\t8\n",
      "  (1, 2)\t9\n",
      "  (3, 4)\t10\n"
     ]
    }
   ],
   "source": [
    "am = pn.create_adjacency_matrix(weights=pn.Ts, triu=True)\n",
    "print(am)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Other Sparse Formats\n",
    "\n",
    "The COO format described above is the basis for OpenPNMs data storage; however, it is not very suitable for performing \"queries\" such as which pores are neighbors to pore `i`?  In fact, the only query that can be performed directly with the COO format is to find which pores are connected by throat `k`, which is just the `(i, j)` values on row `k`. Luckily, there are several other sparse formats we can use. The \"List of Lists\" format is quite useful."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can look for the locations of nonzeros, which tells us which pores are connected to pore `i`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3]\n",
      "[0, 2, 3]\n",
      "[0, 1, 3, 4, 5]\n",
      "[0, 1, 2, 4, 5]\n",
      "[2, 3, 5]\n",
      "[2, 3, 4]\n"
     ]
    }
   ],
   "source": [
    "am = pn.create_adjacency_matrix(weights=pn.Ts, fmt='lil', triu=False)\n",
    "for locations_of_nonzeros in am.rows:\n",
    "    print(locations_of_nonzeros)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that we are looking at the symmetrical version of this array since we want to see all connections for each pore. \n",
    "\n",
    "Or we can look at the values of the nonzeros, which tells us which throats are connected to pore `i`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 3, 7]\n",
      "[0, 9, 4]\n",
      "[3, 9, 1, 5, 8]\n",
      "[7, 4, 1, 10, 6]\n",
      "[5, 10, 2]\n",
      "[8, 6, 2]\n"
     ]
    }
   ],
   "source": [
    "for values_of_nonzeros in am.data:\n",
    "    print(values_of_nonzeros)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Another query we might wish to do is determine which throat connects which pair of pores. The \"Dictionary of Keys\" format is useful for this.  It is basically the COO format, but the `(i, j)` values are used as the dictionary keys.  This is helpful since dicionary lookups are actually quite fast thanks to some sophisticated data strutures used by python. Consider the following:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pores (0, 1): 0\n"
     ]
    }
   ],
   "source": [
    "am = pn.create_adjacency_matrix(weights=pn.Ts, fmt='dok', triu=False)\n",
    "print('pores (0, 1):', am[(0, 1)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One *gotcha* with this approach is that if you request the throat that connects two pores which are not connected, then it returns 0, which makes sense if the adjacency matrix is filled with 1's and 0's, but when throat indices are used as the weights, then 0 is a valid throat number, so receiving a 0 back from a query does not indicate lack of connection. This can be remedied by adding 1 to the throat indices when generating the adjacency matrix, then subtracting 1 again to return the actual throat number: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pores (5, 5): -1\n"
     ]
    }
   ],
   "source": [
    "am = pn.create_adjacency_matrix(weights=pn.Ts+1, fmt='dok', triu=False)\n",
    "print('pores (5, 5):', am[(5, 5)]-1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Incidence Matrix\n",
    "\n",
    "The incidence matrix is a slight variation on the adjacency matrix, but is it tells us which pore is connected to which throat.  In other words, it is an Np-by-Nt array, with a nonzero value at location `[i, k]` indicating that pore `i` is connected to throat `k`.  It looks like:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 0 0 1 0 0 0 1 0 0 0]\n",
      " [1 0 0 0 1 0 0 0 0 1 0]\n",
      " [0 1 0 1 0 1 0 0 1 1 0]\n",
      " [0 1 0 0 1 0 1 1 0 0 1]\n",
      " [0 0 1 0 0 1 0 0 0 0 1]\n",
      " [0 0 1 0 0 0 1 0 1 0 0]]\n"
     ]
    }
   ],
   "source": [
    "im = pn.create_incidence_matrix().todense()\n",
    "print(im)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that finding the locations of nonzeros values in row `i` tells us which throats are connected to pore `i`. This is the same information we can get from the COO format of the adjacency matrix. The incidence matrix is thus not really helpful."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using OpenPNM Methods Query Methods\n",
    "\n",
    "The above introduction was meant to provide some background on how neighbor queries are performed \"behind the scenes\", but it is not very convenient to use those approaches directly. Instead, you can use the methods included in OpenPNM, specifically, the methods attached to the *Network* class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "pn = op.network.Cubic(shape=[4, 4, 1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's start by finding all pores on the 'left' and 'bottom'.  These labels are predefined on `Cubic` networks, and we we cn use the `pores` method to find all pores with these labels:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3]\n",
      "[ 3  7 11 15]\n"
     ]
    }
   ],
   "source": [
    "P_left = pn.pores('left')\n",
    "P_bottom = pn.pores('back')\n",
    "print(P_left)\n",
    "print(P_bottom)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Find Neighoring Pores\n",
    "We now have two sets of pores that actually overlap each other, as illustrated below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "op.visualization.plot_coordinates(pn, pn.Ps, c='lightgrey', \n",
    "                                  markersize=50, ax=ax)\n",
    "op.visualization.plot_coordinates(pn, P_left, c='red', marker='*', \n",
    "                                  markersize=50, ax=ax)\n",
    "op.visualization.plot_coordinates(pn, P_bottom, c='blue', marker='.', \n",
    "                                  markersize=50, ax=ax);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`mode='or'` finds all pores with one or more connections to the input pores\n",
    "\n",
    "Given a set of pores, find the pores that are neighbors to one or more of the inputs.  This is called **OR** since it gives the neighbors of either the bottom pores *or* the left pores, *or* both.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0  1  2  3  7 11 15]\n",
      "[ 4  5  6 10 14]\n"
     ]
    }
   ],
   "source": [
    "Ps = pn.pores(['left', 'back'])\n",
    "print(Ps)\n",
    "Ps = pn.find_neighbor_pores(pores=Ps, mode='or')\n",
    "print(Ps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "op.visualization.plot_coordinates(pn, pn.Ps, c='lightgrey',\n",
    "                                  markersize=50, ax=ax)\n",
    "op.visualization.plot_coordinates(pn, P_left, c='red', \n",
    "                                  markersize=50, marker='*', ax=ax)\n",
    "op.visualization.plot_coordinates(pn, P_bottom, c='blue', \n",
    "                                  markersize=50, marker='.', ax=ax)\n",
    "op.visualization.plot_coordinates(pn, Ps, c='green', \n",
    "                                  markersize=50, marker='s', ax=ax);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`mode='xor' finds all pores with exactly one connection to the input pores\n",
    "\n",
    "Given a set of pores find the pores that are neighbors of one and only one of the input pores.  This is called **XOR**, or 'exclusve_or' because it finds the pores that are neigbhors to the 'bottom' *or* the 'left', but *not* both. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0  1  2  3  7 11 15]\n",
      "[ 4  5 10 14]\n"
     ]
    }
   ],
   "source": [
    "Ps = pn.pores(['left', 'back'])\n",
    "print(Ps)\n",
    "Ps = pn.find_neighbor_pores (pores=Ps, mode='xor')\n",
    "print(Ps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "op.visualization.plot_coordinates(pn, pn.Ps, c='lightgrey',\n",
    "                                  markersize=50, ax=ax)\n",
    "op.visualization.plot_coordinates(pn, P_left, c='red', \n",
    "                                  markersize=50, marker='*', ax=ax)\n",
    "op.visualization.plot_coordinates(pn, P_bottom, c='blue', \n",
    "                                  markersize=50, marker='.', ax=ax)\n",
    "op.visualization.plot_coordinates(pn, Ps, c='green', \n",
    "                                  markersize=50, marker='s', ax=ax);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`mode='xnor'` finds all the pores with 2 or more connections to the input pores\n",
    "\n",
    "This finds pores that are common to both 'left' and 'bottom' pores.  It is called **XNOR** since it is the opposite of **XOR** , incidated by the *N for not* .   Note that **XNOR** and **NXOR** are interchangable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0  1  2  3  7 11 15]\n",
      "[6]\n"
     ]
    }
   ],
   "source": [
    "Ps = pn.pores(['left', 'back'])\n",
    "print(Ps)\n",
    "Ps = pn.find_neighbor_pores(pores=Ps, mode='xnor')\n",
    "print(Ps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "op.visualization.plot_coordinates(pn, pn.Ps, c='lightgrey', \n",
    "                                  markersize=50, ax=ax)\n",
    "op.visualization.plot_coordinates(pn, P_left, c='red', \n",
    "                                  markersize=50, marker='*', ax=ax)\n",
    "op.visualization.plot_coordinates(pn, P_bottom, c='blue', \n",
    "                                  markersize=50, marker='.', ax=ax)\n",
    "op.visualization.plot_coordinates(pn, Ps, c='green', \n",
    "                                  markersize=50, marker='s', ax=ax);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Find Neighboring Throats\n",
    "Neighbor throat queries follow essentially the same logic as the neighboring queries outlined above.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`mode='or'` finds all throats connected to any of the input pores:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "Ps = pn.pores(['left', 'back'])\n",
    "Ts = pn.find_neighbor_throats(pores=Ps, mode='or')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "op.visualization.plot_connections(pn, Ts, ax=ax)\n",
    "op.visualization.plot_coordinates(pn, pn.Ps, c='lightgrey', \n",
    "                                  markersize=50, ax=ax)\n",
    "op.visualization.plot_coordinates(pn, P_left, c='red', \n",
    "                                  markersize=50, marker='*', ax=ax)\n",
    "op.visualization.plot_coordinates(pn, P_bottom, c='blue', \n",
    "                                  markersize=50, marker='.', ax=ax);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`mode='xnor' finds throats shared by input pores only"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "Ps = pn.pores(['left', 'back'])\n",
    "Ts = pn.find_neighbor_throats(pores=Ps, mode='xnor')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "op.visualization.plot_connections(pn, Ts, ax=ax)\n",
    "op.visualization.plot_coordinates(pn, pn.Ps, c='lightgrey', \n",
    "                                  markersize=50, ax=ax)\n",
    "op.visualization.plot_coordinates(pn, P_left, c='red', \n",
    "                                  markersize=50, marker='*', ax=ax)\n",
    "op.visualization.plot_coordinates(pn, P_bottom, c='blue', \n",
    "                                  markersize=50, marker='.', ax=ax);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`mode=xor` finds throats that are only connected to one input pore"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "Ps = pn.pores(['left', 'back'])\n",
    "Ts = pn.find_neighbor_throats(pores=Ps, mode='xor')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "op.visualization.plot_connections(pn, Ts, ax=ax)\n",
    "op.visualization.plot_coordinates(pn, pn.Ps, c='lightgrey', \n",
    "                                  markersize=50, ax=ax)\n",
    "op.visualization.plot_coordinates(pn, P_left, c='red', \n",
    "                                  markersize=50, marker='*', ax=ax)\n",
    "op.visualization.plot_coordinates(pn, P_bottom, c='blue', \n",
    "                                  markersize=50, marker='.', ax=ax);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Find Connecting Throats\n",
    "\n",
    "Given two sets of pores, it is possible to find which throats connects them using the ``find_connecting_throats``:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[12 13 14 15]\n"
     ]
    }
   ],
   "source": [
    "P1 = [0, 1, 2, 3]\n",
    "P2 = [4, 5, 6, 7]\n",
    "Ts = pn.find_connecting_throat(P1, P2)\n",
    "print(Ts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "op.visualization.plot_connections(pn, Ts, ax=ax)\n",
    "op.visualization.plot_coordinates(pn, pn.Ps, c='lightgrey', \n",
    "                                  markersize=50, ax=ax)\n",
    "op.visualization.plot_coordinates(pn, P1, c='red', \n",
    "                                  markersize=50, marker='*', ax=ax)\n",
    "op.visualization.plot_coordinates(pn, P2, c='blue', \n",
    "                                  markersize=50, marker='.', ax=ax);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This function assumes that `P1` and `P2` are lined up, so that finds the connections between each pore `i`.  If there are no connections, then `nans` are returned (which also means that any valid connections are converted to `float`):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[nan nan nan 15.]\n"
     ]
    }
   ],
   "source": [
    "P1 = [0, 1, 2, 3]\n",
    "P2 = [7, 7, 7, 7]\n",
    "Ts = pn.find_connecting_throat(P1, P2)\n",
    "print(Ts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Find Connected Pores\n",
    "\n",
    "Given a list of throats, finding which pores are on either end can be done using the `find_connected_pores` method *or* by looking at `pn['throat.conns']` directly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 1]\n",
      " [1 2]\n",
      " [2 3]]\n"
     ]
    }
   ],
   "source": [
    "Ps = pn.find_connected_pores(throats=[0, 1, 2])\n",
    "print(Ps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0 1]\n",
      " [1 2]\n",
      " [2 3]]\n"
     ]
    }
   ],
   "source": [
    "Ps = pn['throat.conns'][[0, 1, 2]]\n",
    "print(Ps)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is often desired to have a single column of pore indices and to remove duplications.  This can be done with `np.unique`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3]\n"
     ]
    }
   ],
   "source": [
    "print(np.unique(Ps))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `find_connected_pores` method has a `flatten` argument which does the same thing:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3]\n"
     ]
    }
   ],
   "source": [
    "Ps = pn.find_connected_pores(throats=[0, 1, 2], flatten=True)\n",
    "print(Ps)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Removing Throats\n",
    "\n",
    "Removing throats may be useful for a number of reasons such as making a cubic network more heterogeneous, or to study the effect of blockages on flow.  Throat deletion is actualy trivial and requires simply removing the row(s) corresponding to the to-be deleted throats from all throat arrays.  For instance, let's manually delete throats `0` and `3`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "══════════════════════════════════════════════════════════════════════════════\n",
      "net : <openpnm.network.Cubic at 0x1f7ea245c20>\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  #  Properties                                                   Valid Values\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  1  pore.coords                                                         6 / 6\n",
      "  2  throat.conns                                                        7 / 7\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  #  Labels                                                 Assigned Locations\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  1  pore.back                                                               3\n",
      "  2  pore.front                                                              3\n",
      "  3  pore.left                                                               2\n",
      "  4  pore.right                                                              2\n",
      "  5  pore.surface                                                            6\n",
      "  6  throat.surface                                                          7\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n"
     ]
    }
   ],
   "source": [
    "pn = op.network.Cubic(shape=[3, 2, 1])\n",
    "print(pn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that there are only two arrays which contain throat data, so we need to remove rows 0 and 3 from these. The easiest way to this this actually to \"keep\" the rows we want:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "══════════════════════════════════════════════════════════════════════════════\n",
      "net : <openpnm.network.Cubic at 0x1f7ea245c20>\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  #  Properties                                                   Valid Values\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  1  pore.coords                                                         6 / 6\n",
      "  2  throat.conns                                                        5 / 5\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  #  Labels                                                 Assigned Locations\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  1  pore.back                                                               3\n",
      "  2  pore.front                                                              3\n",
      "  3  pore.left                                                               2\n",
      "  4  pore.right                                                              2\n",
      "  5  pore.surface                                                            6\n",
      "  6  throat.surface                                                          5\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n"
     ]
    }
   ],
   "source": [
    "mask = np.ones(pn.Nt, dtype=bool)\n",
    "mask[[0, 3]] = False\n",
    "pn['throat.conns'] = pn['throat.conns'][mask]\n",
    "pn['throat.surface'] = pn['throat.surface'][mask]\n",
    "print(pn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If any phases have been defined then they need to be handled as well. OpenPNM includes a function to `trim` throats from networks, which handles any complications:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "══════════════════════════════════════════════════════════════════════════════\n",
      "net : <openpnm.network.Cubic at 0x1f7ea245c20>\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  #  Properties                                                   Valid Values\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  1  pore.coords                                                         6 / 6\n",
      "  2  throat.conns                                                        3 / 3\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  #  Labels                                                 Assigned Locations\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  1  pore.all                                                                6\n",
      "  2  pore.back                                                               3\n",
      "  3  pore.front                                                              3\n",
      "  4  pore.left                                                               2\n",
      "  5  pore.right                                                              2\n",
      "  6  pore.surface                                                            6\n",
      "  7  throat.all                                                              3\n",
      "  8  throat.surface                                                          3\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n"
     ]
    }
   ],
   "source": [
    "op.topotools.trim(network=pn, throats=[0, 3])\n",
    "print(pn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualizing the network shows that throats are indeed missing, and also that some pores are now isolated which is a problem for numerical computations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "op.visualization.plot_coordinates(pn, pn.Ps, c='lightgrey', \n",
    "                                  markersize=50, ax=ax)\n",
    "op.visualization.plot_connections(pn, ax=ax);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Removing Pores\n",
    "Removing pores is *almost* as easy as removing throats, with **two significant complications**.  \n",
    "\n",
    "1. When a pore is removed, the values in the `'throat.conns'` array must be updated. If pore 2 is removed, the pore 3 becomes the new pore 2.  This means that any throats which were pointing to pore 3 (i.e. [1, 3]) must now be updated to point to pore 2 instead (i.e. [1, 2]). This can be done manually as shown below, but OpenPNM's `trim` function should be used.\n",
    "2. A throat cannot point to nothing, so when a pore is deleted, all of it's neighboring throats must also be deleted.\n",
    "\n",
    "First we'll see how to do this manually, then we'll demonstrate the `trim` function, this time for pores."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first step is to create an array of 0's with 1's in the locations to be trimmed:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 1 0 1 0]\n"
     ]
    }
   ],
   "source": [
    "pn = op.network.Cubic(shape=[3, 2, 1])\n",
    "totrim = np.zeros(pn.Np, dtype=int)\n",
    "totrim[[2, 4]] = 1\n",
    "print(totrim)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now compute the cumulative sum of this array which will then contain values indicating by how much each index should be adjusted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 1 1 2 2]\n"
     ]
    }
   ],
   "source": [
    "offset = np.cumsum(totrim)\n",
    "print(offset)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lastly we create an array that can be used to remap the throat connections:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 1 2 2 3]\n"
     ]
    }
   ],
   "source": [
    "remap = pn.Ps - offset\n",
    "print(remap)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before we proceed with deleting the pores we must first delete the throats. Luckily this is easy, we just need to identify the neighboring throats, the use `trim`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [],
   "source": [
    "Ts = pn.find_neighbor_throats(pores=[2, 4])\n",
    "op.topotools.trim(pn, throats=Ts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can delete pores 2 and 4 as we did with throats above:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "══════════════════════════════════════════════════════════════════════════════\n",
      "net : <openpnm.network.Cubic at 0x1f7ea249db0>\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  #  Properties                                                   Valid Values\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  1  pore.coords                                                         4 / 4\n",
      "  2  throat.conns                                                        3 / 3\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  #  Labels                                                 Assigned Locations\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  1  pore.all                                                                4\n",
      "  2  pore.back                                                               3\n",
      "  3  pore.front                                                              1\n",
      "  4  pore.left                                                               2\n",
      "  5  pore.right                                                              1\n",
      "  6  pore.surface                                                            4\n",
      "  7  throat.all                                                              3\n",
      "  8  throat.surface                                                          3\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n"
     ]
    }
   ],
   "source": [
    "mask = np.ones(pn.Np, dtype=bool)\n",
    "mask[[2, 4]] = False\n",
    "for k, v in pn.items():\n",
    "    if k.startswith('pore.'):\n",
    "        pn[k] = v[mask]\n",
    "print(pn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lastly we must remap the throat conns:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [],
   "source": [
    "pn['throat.conns'] = remap[pn['throat.conns']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "op.visualization.plot_coordinates(pn, c='lightgrey', \n",
    "                                  markersize=50, ax=ax)\n",
    "op.visualization.plot_connections(pn, ax=ax);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Of course, the easy way is just to use `trim` directly:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pn = op.network.Cubic(shape=[3, 2, 1])\n",
    "op.topotools.trim(network=pn, pores=[2, 4])\n",
    "fig, ax = plt.subplots()\n",
    "op.visualization.plot_coordinates(pn, c='lightgrey', \n",
    "                                  markersize=50, ax=ax)\n",
    "op.visualization.plot_connections(pn, ax=ax);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adding Pores and Throats\n",
    "\n",
    "Adding pores and throats can also be done by hand, but there is one significant complication: when you add a pore or throat, a decision must be made about what values to put into these new locations for all the arrays that already exist. \n",
    "\n",
    "This can be done manually as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "══════════════════════════════════════════════════════════════════════════════\n",
      "net : <openpnm.network.Cubic at 0x1f7ea32dcc0>\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  #  Properties                                                   Valid Values\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  1  pore.coords                                                         8 / 8\n",
      "  2  throat.conns                                                        7 / 7\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  #  Labels                                                 Assigned Locations\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n",
      "  1  pore.back                                                               3\n",
      "  2  pore.front                                                              3\n",
      "  3  pore.left                                                               2\n",
      "  4  pore.right                                                              2\n",
      "  5  pore.surface                                                            6\n",
      "  6  throat.surface                                                          7\n",
      "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n"
     ]
    }
   ],
   "source": [
    "pn = op.network.Cubic(shape=[3, 2, 1])\n",
    "new_pores = [[1.5, 2.5, 0.5], [3, 1, 0.5]]\n",
    "coords = np.vstack((pn['pore.coords'], new_pores))\n",
    "pn['pore.coords'] = coords\n",
    "print(pn)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We must now extend the length of all the pore arrays as well. We are lucky in this case that only labels are present.  This means we know the shape of of the arrays (i.e. Np-by-1) and we know that `False` is probably the correct value to put into the new locations:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [],
   "source": [
    "for k in pn.labels():\n",
    "    if k.startswith('pore.'):\n",
    "        pn[k] = np.hstack((pn[k], [False, False]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "op.visualization.plot_coordinates(pn, c='lightgrey', \n",
    "                                  markersize=50, ax=ax)\n",
    "op.visualization.plot_connections(pn, ax=ax);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's add throats to these new pores:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_conns = [[1, 6], [4, 7], [5, 7]]\n",
    "conns = np.vstack((pn['throat.conns'], new_conns))\n",
    "pn['throat.conns'] = conns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "op.visualization.plot_coordinates(pn, c='lightgrey', \n",
    "                                  markersize=50, ax=ax)\n",
    "op.visualization.plot_connections(pn, ax=ax);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Obviously, in practice we'd like to use OpenPNM's `extend` method instead:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [],
   "source": [
    "pn = op.network.Cubic(shape=[3, 2, 1])\n",
    "new_pores = [[1.5, 2.5, 0.5], [3, 1, 0.5]]\n",
    "new_conns = [[1, 6], [4, 7], [5, 7]]\n",
    "op.topotools.extend(network=pn, coords=new_pores)\n",
    "op.topotools.extend(network=pn, conns=new_conns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "op.visualization.plot_coordinates(pn, c='lightgrey', \n",
    "                                  markersize=50, ax=ax)\n",
    "op.visualization.plot_connections(pn, ax=ax);"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "toc-autonumbering": true
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
