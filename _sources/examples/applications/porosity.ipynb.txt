{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predicting Porosity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The example explains how to estimate porosity of a network. We also discuss some challenges in estimating the porosity of the network and how to reduce the estimation error."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import openpnm as op\n",
    "import porespy as ps\n",
    "import matplotlib.pyplot as plt\n",
    "ps.settings.tqdm[\"disable\"] = True\n",
    "op.visualization.set_mpl_style()\n",
    "np.random.seed(10)\n",
    "%matplotlib inline\n",
    "np.set_printoptions(precision=5)\n",
    "op.Workspace().settings.loglevel = 40"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create a random cubic network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "pn = op.network.Cubic(shape=[15, 15, 15], spacing=1e-6)\n",
    "pn.add_model_collection(op.models.collections.geometry.cubes_and_cuboids)\n",
    "pn.regenerate_models()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculate void and bulk volume"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The value of Porosity is: 0.21\n"
     ]
    }
   ],
   "source": [
    "Vol_void = np.sum(pn['pore.volume'])+np.sum(pn['throat.volume'])\n",
    "inlet = pn.pores('left')\n",
    "outlet = pn.pores('right')\n",
    "A = op.topotools.get_domain_area(pn, inlets=inlet, outlets=outlet)\n",
    "L = op.topotools.get_domain_length(pn, inlets=inlet, outlets=outlet)\n",
    "Vol_bulk = A * L\n",
    "Poro = Vol_void / Vol_bulk\n",
    "print(f'The value of Porosity is: {Poro:.2f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Discussions and Issues"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Domain volume"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One of the issues in estimation of porosity of the network is to estimate the domain volume correctly. In a cubic network for example, finding the length at x direction using Nx * spacing is erroneous. The reason is the domain length in x direction includes additional lengths from half of pore diameter for pores that locate on the left and right side. This is shown in figure below:\n",
    "\n",
    "left) the green plane is located at the pore centers of left boundary pores and some pore volume on the left is ignored. Applying a similar plane on other sides of the network to find the length in each direction, the resulting bulk volume could be underestimated. \n",
    "\n",
    "right) the green plane is located at the far left side. Applying a similar plane on other sides of the network to find the length in each direction, the resulting bulk volume could be overestimated. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![image](https://user-images.githubusercontent.com/43128873/187976526-d36c60be-8514-4326-8ee5-00a24ea90d56.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Overlapping pores and throats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Another issue is to ensure that the pore-scale models for volume are consistent. For example there is no overlapping pores, because in this case the void volume calculation will overestimate the real void space. Depending on the pore scale model used for the shape of pores and throats, they may need special methods to calculate the void volume to account for the overlap between throats and pores. Depending on the method that was used for assigning throat lengths, this overlap volume may be included in volume calculations. Existing methods to correct the throat volumes are ``lens`` and ``pendular_ring`` methods available in geometry models for throat_volume. For example assuming a spheres and cylinders geometry, `lens` model in geometry collection tackles this problem. The `spheres_and_cylinders` geometry collection includes `throat.total_volume` and `throat.volume`. `throat.volume` is the volume of throat with corrections using ``lens`` volume:\n",
    "\n",
    "Throat volume (`throat.volume`) = volume of cylinder (`throat.total volume`) - the overlap of cylinder with spherical pores at its two ends  (`difference`)\n",
    "\n",
    "Let's create a spheres and cylinders geometry:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "pn.add_model_collection(op.models.collections.geometry.spheres_and_cylinders)\n",
    "pn.regenerate_models()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial Porosity: 0.12852\n",
      "Corrected Porosity: 0.12590\n"
     ]
    }
   ],
   "source": [
    "Vol_void_initial = np.sum(pn['pore.volume'])+np.sum(pn['throat.total_volume'])\n",
    "Vol_void_corrected = np.sum(pn['pore.volume'])+np.sum(pn['throat.volume'])\n",
    "Poro_initial = Vol_void_initial / Vol_bulk\n",
    "Poro_corrected = Vol_void_corrected / Vol_bulk\n",
    "print(f'Initial Porosity: {Poro_initial:.5f}')\n",
    "print(f'Corrected Porosity: {Poro_corrected:.5f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Although in this example the lens volume was negligible, depending on the size of the pores and throats, this value can be too high to be neglected."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ".. Note:: <Pendular ring correction>\n",
    "\n",
    "    `Pendular_ring` method calculates the volume of the pendular rings residing between the end of a cylindrical throat and spherical pores that are in contact but not overlapping. This volume should be added to the throat volume if the throat length was found as the center-to-center distance less the pore radii."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extracted networks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Void volume"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In extracted networks, different geometrical shapes can be assigned to the pores and throats and their volume can be calculated using existing geometry models. However, the original segmented pore regions are not regular shapes. Therefore, the total pore and throat volumes in the network don't add up to the known void volume, since the pores and throats don't fill space perfectly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Porosity from image: 63.3%\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 464,
       "width": 464
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "np.random.seed(10)\n",
    "im = ps.generators.overlapping_spheres(shape=[100, 100, 100], r=10, porosity=0.5, maxiter=0)\n",
    "plt.imshow(im[:, :, 50]);\n",
    "im_poro = ps.metrics.porosity(im)\n",
    "print(f\"Porosity from image: {im_poro*100:.1f}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "snow = ps.networks.snow2(im, boundary_width = 0)\n",
    "network = snow.network\n",
    "pn = op.io.network_from_porespy(network)\n",
    "pn['pore.diameter']=network['pore.inscribed_diameter']\n",
    "pn['throat.diameter']=network['throat.inscribed_diameter']\n",
    "model=op.models.geometry.throat_length.cubes_and_cuboids\n",
    "pn.add_model(propname='throat.length',\n",
    "             model=model,\n",
    "             regen_mode='normal')\n",
    "model=op.models.geometry.pore_volume.cube\n",
    "pn.add_model(propname='pore.volume',\n",
    "             model=model,\n",
    "             regen_mode='normal')\n",
    "model=op.models.geometry.throat_volume.cuboid\n",
    "pn.add_model(propname='throat.volume',\n",
    "             model=model,\n",
    "             regen_mode='normal')\n",
    "pn.regenerate_models()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Porosity from pnm: 67.5%\n"
     ]
    }
   ],
   "source": [
    "Vol_void = np.sum(pn['pore.volume'])+np.sum(pn['throat.volume'])\n",
    "Vol_bulk = 100**3 # from the image\n",
    "pnm_poro = Vol_void / Vol_bulk\n",
    "print(f\"Porosity from pnm: {pnm_poro*100:.1f}%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ".. Notes:: <Volume errors>\n",
    "\n",
    "\n",
    "    1) Note that in the example above, we assumed the original image was available for calculating the bulk volume. Assuming the original image is not available, calculating the bulk volume for the extracted network is another source of approximation error. Existing methods in topotools such as `get_domain_length` and `get_domain_area` tackle this problem to provide a better approximation of bulk volume of the network. \n",
    "\n",
    "    2) Note that in the example above, we assumed cubic pores and cuboid throats for the network. Assigning other diameters, shapes, and volume functions would result in a different estimation of void volume."
   ]
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
